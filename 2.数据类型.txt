
数据类型：
	
	1、tinyint类型：
		字节: 1  
	    带符号：-128 ~ 127 tinyint
		无符号：0 ~ 255   tinyint unsigned
		尽量少使用unsigned，因为一个小数字
		
		减去一个大数字的时候，会导致查询结果出错
	
	2.BIT类型:
		bit[(M)] ：位字段类型。M表示每个值的位数，范围从1~64. 如果M被忽略，默认为1
		
		例子:create table tt4 ( id int, a bit(8));
		设置a的类型为8个比特位
		
		2.1注意设置BIT类型的时候，bit字段的值是按照ASCII码的值来表示的
		
		2.2如果值要设置为0或1的时候，只需要BIT字段的比特位个数位1，则就只能表示0或1 超过1就会报错
		
	3.小数（float）类型：
		3.1 float[(m,d)] [unsigned] :M指定显示长度，d指定小数位数 占用4个字节
	
		例子:float(4,2) 表示的范围是-99.99 ~ 99.99
			 float(4,2) unsigned 表示的范围是0 ~ 99.99
		(mysql在保值时会四舍五入)
		l
		3.2 decimal[(m,d)] [unsigned] :M指定显示长度，d指定小数位数 精度高于float
		
	（float 的精度大约7位，
	decimal整数最大位数m为65，支持的小数最大位数d是30，如果d被省略，默认为0，m被省略默认为10）
	
	4.字符类型
		4.1 char(L) :固定长度字符串，L是可以存储的长度，单位为字符，最大长度是255
		
		4.2 varchar(L):可变长度字符串，L表示字符长度，最大长度为65535个字节
		
		**varchar长度可以指定为0到65535之间的值，但是有1 - 3 个字节用于记录数据大小，
		所以说有效字节数是65532。
		
		当我们的表的编码是utf8时，varchar(n)的参数n最大值是65532/3=21844[因为utf中，一个字符占用3个字节]，
		如果编码是gbk，varchar(n)的参数n最大是65532/2=32766（因为gbk中，一个字符占用2字节）。
		
		例子: create table tt11(id int, name varchar(21845))charset=utf8;
		      会报错
			  
			  create table tt11(name varchar(21844)) charset=utf8;
			  创建成功
			  
			  验证了utf8确实是 不能超过21844

***char与varchar对空间利用的对比：
			  
		  char(4)   varchar(4)   char占用字节  varchar占用字节
	abcd  abcd      abcd          4*3 = 12     4*3 = 12
	a     a         a             4*3 = 12     1*3 = 3
	abcde 失败  	失败          超过长度     超过长度
		  
	5.日期和时间类型
		 
		datetime 时间日期格式'yyyy-mm-dd HH:ii:ss' 表示范围从1000到9999，占用8字节
		date:日期'yyyy-mm-dd'，占用3字节
		timestamp：时间戳，从1970年开始的yyyy-mm-dd HH:ii:ss 格式和datetime完全一致，占用4字节
		


	6.enum和set
		
		enum:
		语法：
			enum：枚举，"单选"类型 ;
			enum('选项1','选项2','选项3'...);
			
 			该设定只是提供了若干个选项的值，最终一个单元格中，实际只存储了其中一个值;并且出于效率
         考虑，这些值实际存储的是数字，因为这些选项的每个选项值依次对应如下数字:1，2，3...最多65535个
		 
		 
		set
		语法：
			set: 集合，"多选类型" ;
			set('选项1','选项2','选项3'...)
			该设定只是提供了若干个选项的值，最终一个单元格中，实际可存储任意多个值;出于效率
			考虑，这些值实际存储的是数字，因为这些选项的每个选项值依次对应如下数字:1,2,4,8...
		最多64个
			
		例子： 调查表a，需要调查人的运动喜好，在(足球，篮球，乒乓球)中选择(可多选)，(男，女)单选

		//创建表
			create table list(
			   username varchar(30), 
			   hobby set('足球','篮球','乒乓球'), 
			   gender enum('男','女')
			   );
			   
 MariaDB [jxy]> desc list;
 
+----------+------------------------------------+------+-----+---------+-------+
| Field    | Type                               | Null | Key | Default | Extra |
+----------+------------------------------------+------+-----+---------+-------+
| username | varchar(30)                        | YES  |     | NULL    |       |
| hobby    | set('足球','篮球','乒乓球')        | YES  |     | NULL    |       |
| gender   | enum('男','女')                    | YES  |     | NULL    |       |
+----------+------------------------------------+------+-----+---------+-------+
		
		//插入数据
		
			insert into list values('贾xy','足球','男');
			insert into list values('小贾','足球,篮球，乒乓球','女');
			insert into list values('小小贾','篮球,乒乓球','女');
			
MariaDB [jxy]> select* from list;
+-----------+-------------------------+--------+
| username  | hobby                   | gender |
+-----------+-------------------------+--------+
| 贾xy      | 足球                    | 男     |
| 小贾      | 足球,篮球,乒乓球        | 女     |
| 小小贾    | 篮球,乒乓球             | 女     |
+-----------+-------------------------+--------+

			
		//查询所有爱好为足球的人
		
		**集合查询使用find_in_set函数：
			find_in_set(sub,str_list) ：如果 sub 在 str_list 中，则返回下标；如果不在，返回0； str_list 用逗
号分隔的字符串。
		 
		 select find_in_set('a', 'a,b,c'); 返回1 a在abc中
		 
		  select find_in_set('z', 'a,b,c'); 返回0 z不在abc中
		  
		
		select* from list where find_in_set('足球',hobby);
	 或者select* from list where hobby = '打游戏';
		
+-----------+-------------------------+--------+
| username  | hobby                   | gender |
+-----------+-------------------------+--------+
| 贾xy      | 足球                    | 男     |
| 小贾      | 足球,篮球,乒乓球        | 女     |
+-----------+-------------------------+--------+















		 